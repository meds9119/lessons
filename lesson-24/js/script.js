'use strict'

// Задача №1
// Що потрапить в консоль?

let someVar = 0;
++someVar;

if (someVar) {
    console.log(someVar);
}

// Відповідь: 1.
// ++i (інкремент префіксного збільшення) збільшує let someVar зі значенням 1 на одиницю (1)
// умовний оператор if повертає значення змінної (яка і є в такому випадку умовою). Умова виконана (true) і в console
// ми бачимо значення змінної.

//------------------------------------------------------------------------//

// Задача №2
// За допомогою циклу FOR виведіть в консоль 10 рядків:
//     Пункт №1
// Пункт №2
// і т.д.

// Розв'язок:

const count = 10

for (let item = 0; item < count; item++) {
    console.log(`Пункт № ${item}`)
}

// Тут запускаємо цикл, який приймає змінну зі значенням "0", показуємо скільки разів його треба прогнати
// (константа count вказує на кількість 10. Тобто цикл пройде 10 разів. І третя частина циклу з інкрементом,
// який і виконує збільшення (в нашому випадку на "1" одиницю).
// консоль покаже пункти № 0 - 9 (в загальній кількості 10)

//------------------------------------------------------------------------//

//     Задача №3
// Що потрапить в консоль ?

if (2 * 20 <= 10 || 30 / 2 < 5 && 10 <= "10" || 20 === "20") {
    console.log('000');
}

// Відповідь: ця умова повертає false, тобто в консоль нічого не потрапляє (console.log ('000') виведеться при true) бо:
// 1) 20 не є менше або рівне за 10 (false)
// 2) 15 не є менше або рівне 5 (false)
// 3) 10 number менше або дорівнює "10" string при не строгому порівняні (true), бо number при не строгому порівняні переходить в string
// 4) У нас порівнюється числове значення 20 (тип number) з рядковим значенням (тип string) через логічний оператор
// тотожно рівно === . Ця частина теж (false), бо number не тотожно рівно до string

//------------------------------------------------------------------------//

// Задача №4
// Створіть функцію, яка повертає результат ділення числа a на число b з додаванням рядка "Результат ділення: "
// Викличте функцію передаючи різні значення, у тому числі не передаючи зовсім.
//     Функція не має повертати NaN, Infinite або помилку

// Розв'язок:

// 1)
function getDivision(a, b) {
    return a / b
}

let resultOne = getDivision(4, 2)
console.log(`Результат ділення: 1) ${resultOne}`)

// 2)

function getDivision2(a, b) {
    return a / b
}

let resultSecond = getDivision2(2, 4)
console.log(`Результат ділення: 2) ${resultSecond}`)

// 3)

function getDivision3(a, b) {
    return (a / b) / (b / a)
}

let resultThird = getDivision3(5, 5)
console.log(`Результат ділення: 3) ${resultThird}`)

// 4)

function getDivision4(a, b) {
    return a / b
}

let resultFourth = getDivision4(111, 44)
console.log(`Результат ділення: 4) ${Math.floor(resultFourth)}. Без округлення до більшого числа ${resultFourth}`)

// 5)

function getDivision5() {
    let a = 2
    let b = 20
    let result = []
    for (let i = a; i <= b; i = i+2) {
        result.push(i)
    }
    return result
}

let resultFifth = getDivision5()
console.log(`Результат: 5) ${resultFifth}`)

// Функція getDivision - getDivision4 (допис get означає, що функція має щось повертати, тобто ретурнити) приймає змінні a, b
// яким ми надаємо значення у виклику функції, проводить обчислення (яке одразу ретурниться бо тут легкі обчислення). Далі
// ми описуємо змінну resultOne - resultFourth і присвоюємо їй функцію (через формальні параметри передаємо значення). Тобто результат з
// return присвоюється змінній, яку і виводимо в консоль, щоб подивитись цей результат.

// У функції 5) змінні оголошуються в самій функції, (насправді, ми можемо прямо формальним параметрам значення присвоїти,
// не бажано використовувати лише глобальні змінні. Це ті, які оголошені та описані поза функцією)
// їм присвоюється значення, і ці значення проганяємо через цикл, перевіряючи на кратність 2. Цифри, які кратні 2 пушимо в створений
// у функції пустий масив let result = []. Результат виводиться в консоль.


//------------------------------------------------------------------------//

// Задача №5
// Створіть масив даних - 5 елементів, один з яких число 10
// Обробіть масив за допомогою методу перебору
// Перевіряйте елемент на відповідність числу 10, та у разі відповідності, виводьте в консоль

// Розв'язок:
// створюємо масив зі списком значень:

let someArray = ['red', 'apple', 10, true, 'car']
// let someArray =     '0'     '1'    '2'   '3'    '4' --- його комірки, довжина (array.length) масиву.
// Завжди початок з 0 (нуля)

// Одновимірний масив можна продивитися перебравши довжину масиву, також через цикли for of і forEach, через умову every / some,
// також за допомогою includes, find і т.д.

// 1) array.length

for (let index = 0; index < someArray.length; index++) {
    if (someArray[index] === 10) {
        console.log(`Перевірити, чи є у масиві число 10 - ${someArray[index]}`)
    }
}

// 2) цикл for of

for (let someArrayElement of someArray) {
    if (someArrayElement === 10) {
        console.log('Yes')
    }
}

// 3) цикл forEach 
let result = false;
someArray.forEach(function (element) {
    if (element === 10) {
        result = true;
    }
})

if (result) {
    console.log('Масив містить елемент зі значенням 10')
} else {
    console.log('У масиві не знайдено елементу, який відповідає значенню 10')
}

// 4) За допомогою some / every. Де some - коли хоча б один елемент відповідає умові, а every - якщо всі елементи відповідають


if (someArray.some((element) => element === 10)) {
    console.log(`Масив містить хоча б один елемент зі значенням 10`)
} else {
    console.log(`Масив не містить хоча б один елемент зі значенням 10`)
}


if (someArray.every((element) => element === 10)) {
    console.log(`Всі елементи у масиві відповідають значенню 10`)
} else {
    console.log(`Не всі елементи у масиві відповідають значенню 10`)
}

// 5) за допомогою includes

if (someArray.includes(10)) {
    console.log('Є такий елемент')
} else {
    console.log('Нема такого елементу')
}

// .find має схожий принцип